#include <iostream>

// Базовий клас
class Base {
protected:
    int dat;  // Захищене ціле поле

public:
    Base() : dat(1) {}  // Конструктор за замовчуванням ініціалізує dat значенням 1
    Base(int d) : dat(d) {}  // Конструктор із параметром ініціалізує dat значенням d
};

// Похідний клас D1 з захищеним полем d1
class D1 : protected Base {
protected:
    int d1;  // Захищене ціле поле

public:
    D1() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D1(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D1(int d, int dt) : Base(dt), d1(d) {}  // Конструктор із двома параметрами ініціалізує d1 значенням d та базовий клас значенням dt
};

// Похідний клас D2B з захищеним полем d2 та успадкованням від класів Base і D1
class D2B : protected Base, protected D1 {
protected:
    int d2;  // Захищене ціле поле

public:
    D2B() : d2(1) {}  // Конструктор за замовчуванням ініціалізує d2 значенням 1
    D2B(int d) : d2(d) {}  // Конструктор із параметром ініціалізує d2 значенням d
    D2B(int d, int dt, int d1, int d1t) : Base(dt), D1(d1, d1t), d2(d) {}  // Конструктор із чотирма параметрами ініціалізує d2 значенням d, базовий клас значенням dt, клас D1 значеннями d1 та d1t
};

// Похідний клас D3_2B з захищеним полем d1 та успадкованням від класу D2B
class D3_2B : protected D2B {
protected:
    int d1;  // Захищене ціле поле

public:
    D3_2B() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D3_2B(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D3_2B(int d1, int d, int d2, int d3, int d4) : d1(d1), D2B(d, d2, d3, d4) {}  // Конструктор із п'ятьма параметрами ініціалізує d1 значенням d1, клас D2B значеннями d, d2, d3, та d4
};

// Похідний клас D3_1 з захищеним полем d1 та успадкованням від класу D1
class D3_1 : protected D1 {
protected:
    int d1;  // Захищене ціле поле

public:
    D3_1() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D3_1(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D3_1(int d, int d1, int d2) : D1(d1, d2), d1(d) {}  // Конструктор із трьома параметрами ініціалізує d1 значенням d, клас D1 значеннями d1 та d2
};

// Похідний клас D4 з захищеним полем d1 та успадкованням від класів D1 і D3_1
class D4 : protected D1, protected D3_1 {
protected:
    int d1;  // Захищене ціле поле

public:
    D4() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D4(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D4(int d, int d1, int d2, int d3, int d4, int d5) : D1(d1, d2), d1(d), D3_1(d3, d4, d5) {}  // Конструктор із шістьма параметрами ініціалізує d1 значенням d, клас D1 значеннями d1 та d2, клас D3_1 значеннями d3, d4, та d5
};

// Похідний клас D5 з захищеним полем d1 та успадкованням від класів D4 і D3_1
class D5 : protected D4, protected D3_1 {
protected:
    int d1;  // Захищене ціле поле

public:
    D5() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D5(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D5(int d, int d1, int d2, int d3, int d4, int d5, int d6, int d7, int d8, int d9, int d10, int d11) : d1(d), D3_1(d3, d4, d5), D4(d6, d7, d8, d9, d10, d11) {}  // Конструктор із дванадцятьма параметрами ініціалізує d1 значенням d, клас D3_1 значеннями d3, d4, та d5, клас D4 значеннями d6, d7, d8, d9, d10, та d11
};

// Похідний віртуальний клас D1V з захищеним полем d1 та успадкованням від класу Base
class D1V : virtual protected Base {
protected:
    int d1;  // Захищене ціле поле

public:
    D1V() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D1V(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D1V(int d, int dt) : Base(dt), d1(d) {}  // Конструктор із двома параметрами ініціалізує d1 значенням d, базовий клас значенням dt
};

// Похідний віртуальний клас D2BV з захищеним полем d2 та успадкованням від класів Base і D1V
class D2BV : virtual protected Base, virtual protected D1V {
protected:
    int d2;  // Захищене ціле поле

public:
    D2BV() : d2(1) {}  // Конструктор за замовчуванням ініціалізує d2 значенням 1
    D2BV(int d) : d2(d) {}  // Конструктор із параметром ініціалізує d2 значенням d
    D2BV(int d, int dt, int d1, int d1t) : Base(dt), D1V(d1, d1t), d2(d) {}  // Конструктор із чотирма параметрами ініціалізує d2 значенням d, базовий клас значенням dt, клас D1V значеннями d1 та d1t
};

// Похідний віртуальний клас D3_2BV з захищеним полем d1 та успадкованням від класу D2BV
class D3_2BV : virtual protected D2BV {
protected:
    int d1;  // Захищене ціле поле

public:
    D3_2BV() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D3_2BV(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D3_2BV(int d1, int d, int d2, int d3, int d4) : d1(d1), D2BV(d, d2, d3, d4) {}  // Конструктор із п'ятьма параметрами ініціалізує d1 значенням d1, клас D2BV значеннями d, d2, d3, та d4
};

// Похідний віртуальний клас D3_1V з захищеним полем d1 та успадкованням від класу D1V
class D3_1V : virtual protected D1V {
protected:
    int d1;  // Захищене ціле поле

public:
    D3_1V() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D3_1V(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D3_1V(int d, int d1, int d2) : D1V(d1, d2), d1(d) {}  // Конструктор із трьома параметрами ініціалізує d1 значенням d, клас D1V значеннями d1 та d2
};

// Похідний віртуальний клас D4V з захищеним полем d1 та успадкованням від класів D1V і D3_1V
class D4V : virtual protected D1V, virtual protected D3_1V {
protected:
    int d1;  // Захищене ціле поле

public:
    D4V() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D4V(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D4V(int d, int d1, int d2, int d3, int d4, int d5) : D1V(d1, d2), d1(d), D3_1V(d3, d4, d5) {}  // Конструктор із шістьма параметрами ініціалізує d1 значенням d, клас D1V значеннями d1 та d2, клас D3_1V значеннями d3, d4, та d5
};

// Похідний віртуальний клас D5V з захищеним полем d1 та успадкованням від класів D4V і D3_1V
class D5V : virtual protected D4V, virtual protected D3_1V {
protected:
    int d1;  // Захищене ціле поле

public:
    D5V() : d1(1) {}  // Конструктор за замовчуванням ініціалізує d1 значенням 1
    D5V(int d) : d1(d) {}  // Конструктор із параметром ініціалізує d1 значенням d
    D5V(int d, int d1, int d2, int d3, int d4, int d5, int d6, int d7, int d8, int d9, int d10, int d11) : d1(d), D3_1V(d3, d4, d5), D4V(d6, d7, d8, d9, d10, d11) {}  // Конструктор із дванадцятьма параметрами ініціалізує d1 значенням d, клас D3_1V значеннями d3, d4, та d5, клас D4V значеннями d6, d7, d8, d9, d10, та d11
};

// Головна функція
int main() {
    // Виведення розмірів об'єктів кожного класу
    std::cout << "Size of Base: " << sizeof(Base) << std::endl;
    std::cout << "Size of D1: " << sizeof(D1) << std::endl;
    std::cout << "Size of D2B: " << sizeof(D2B) << std::endl;
    std::cout << "Size of D3_2B: " << sizeof(D3_2B) << std::endl;
    std::cout << "Size of D3_1: " << sizeof(D3_1) << std::endl;
    std::cout << "Size of D4: " << sizeof(D4) << std::endl;
    std::cout << "Size of D5: " << sizeof(D5) << std::endl;
    std::cout << "Size of D1V: " << sizeof(D1V) << std::endl;
    std::cout << "Size of D2BV: " << sizeof(D2BV) << std::endl;
    std::cout << "Size of D3_2BV: " << sizeof(D3_2BV) << std::endl;
    std::cout << "Size of D3_1V: " << sizeof(D3_1V) << std::endl;
    std::cout << "Size of D4V: " << sizeof(D4V) << std::endl;
    std::cout << "Size of D5V: " << sizeof(D5V);
    return 0;
}
